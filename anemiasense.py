# -*- coding: utf-8 -*-
"""AnemiaSense.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I-B5qABs1gSNIWNFxWWCiLQw24kxgpIV
"""

#importing the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv('anemia.csv')
df.head()

df.info()
df.shape
df.isnull().sum()
df.describe()

df['Gender'].value_counts().plot(kind='bar', color=['orange', 'green'])
plt.title('Gender Distribution')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.show()

df['Gender'].value_counts().plot(kind='pie', autopct='%1.1f%%', colors=['orange', 'green'])
plt.title('Gender Percentage')
plt.ylabel('')
plt.show()

sns.histplot(df['Hemoglobin'], kde=True)

plt.figure(figsize=(6,6))
ax= sns.barplot(y= df['Hemoglobin'], x = df['Gender'], hue = df [ 'Result'], ci= None)
ax.set(xlabel=['male', 'female'])
ax.bar_label(ax.containers[0])
ax.bar_label(ax.containers[1])
plt.title("Mean Hemoglobin by Gender and Result")
plt.show()

sns.pairplot(df)

sns.heatmap(df.corr(),annot=True,cmap="RdYlGn", linewidths=0.2)
#data.corr()-->correlation matrix
fig=plt.gcf()
fig.set_size_inches(10,8)
plt.show()

x = df.drop('Result', axis = 1)
y=df['Result']
x
y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test =train_test_split(x, y, test_size=0.2, random_state= 20 )
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
logistic_regression = LogisticRegression()
logistic_regression.fit(x_train, y_train)
y_pred = logistic_regression.predict(x_test)
acc_lr = accuracy_score(y_test,y_pred)
c_lr = classification_report (y_test,y_pred)
print('Accuracy Score: ',acc_lr)
print(c_lr)

from sklearn.ensemble import RandomForestClassifier
random_forest = RandomForestClassifier()
random_forest.fit(x_train, y_train)
y_pred = random_forest.predict(x_test)
acc_rf = accuracy_score(y_test,y_pred)
c_rf = classification_report(y_test,y_pred)
print('Accuracy Score: ',acc_rf)
print(c_rf)

from sklearn.tree import DecisionTreeClassifier
decision_tree_model = DecisionTreeClassifier()
decision_tree_model.fit(x_train, y_train)
y_pred = decision_tree_model.predict(x_test)
acc_dt = accuracy_score(y_test,y_pred)
c_dt = classification_report (y_test,y_pred)
print('Accuracy Score: ',acc_dt)
print(c_dt)

from sklearn.naive_bayes import GaussianNB
NB = GaussianNB()
NB.fit(x_train, y_train)
y_pred = NB.predict(x_test)
acc_nb = accuracy_score(y_test,y_pred)
c_nb = classification_report(y_test,y_pred)
print('Accuracy Score: ',acc_nb)
print(c_nb)

from sklearn.svm import SVC
support_vector = SVC()
support_vector.fit(x_train, y_train)
y_pred = support_vector.predict(x_test)
acc_svc = accuracy_score(y_test,y_pred)
c_svc = classification_report(y_test,y_pred)
print('Accuracy Score: ',acc_svc)
print(c_svc)

from sklearn.ensemble import GradientBoostingClassifier
GBC=GradientBoostingClassifier()
GBC.fit(x_train, y_train)
y_pred = GBC.predict(x_test)
acc_gbc = accuracy_score(y_test,y_pred)
c_gbc = classification_report(y_test,y_pred)
print('Accuracy Score: ',acc_gbc)
print(c_gbc)

prediction = GBC.predict([[0,11.6,22.3,30.9,74.5]])

prediction[0]
if prediction[0] == 0:
  print("You don't have any Anemic Disease")
elif prediction[0]==1:
  print("You have amemic disease")

model = pd.DataFrame({'Model': ['Linear Regression', 'Decision Tree Classifier','RandomForest Classifier','Gaussian Navie Bayes',
                                'Support Vector Classifier','Gradient Boost Classifier'],
                      'Score': [acc_lr,acc_dt,acc_rf,acc_nb,acc_svc,acc_gbc],
                      })

model

import pickle
import warnings
pickle.dump(GBC,open("model.pkl", "wb"))